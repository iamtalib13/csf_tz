[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-12-09 20:53:38.004519",
  "module": "Trade In",
  "name": "Trade In Stock Entry",
  "reference_doctype": "Sales Invoice",
  "script": "# Initialize an empty list to store items\r\nitems_list = []\r\n\r\n# Fetching Company's Trade_in_control_account from Company\r\ntrade_in_control_account = frappe.db.get_value('Company', doc.company, 'custom_trade_in_control_Account')\r\n\r\n# Iterate through the items in the document\r\nfor item in doc.items:\r\n    if item.get(\"custom_trade_in_item\") and item.get(\"custom_trade_in_qty\"):\r\n        # Check if custom_trade_in_batch_no exists\r\n        custom_batch_no = item.get(\"custom_trade_in_batch_no\")\r\n\r\n        if custom_batch_no:\r\n            # Check if a Batch with this ID already exists\r\n            batch_exists = frappe.db.exists(\"Batch\", {\"batch_id\": custom_batch_no})\r\n            if not batch_exists:\r\n                # Create a new batch with the given custom_trade_in_batch_no\r\n                batch_doc = frappe.new_doc(\"Batch\")\r\n                batch_doc.item = item.get(\"custom_trade_in_item\")\r\n                batch_doc.batch_id = custom_batch_no  # Use the provided custom batch number\r\n                batch_doc.save()\r\n\r\n        # Append each item's details to the items_list\r\n        items_list.append({\r\n            \"item_code\": item.get(\"custom_trade_in_item\"),\r\n            \"qty\": item.get(\"custom_trade_in_qty\"),\r\n            \"uom\": \"nos\",\r\n            \"basic_rate\": item.get(\"custom_trade_in_incoming_rate\"),\r\n            \"batch_no\": custom_batch_no,  # Use the custom batch number here\r\n            \"serial_no\": item.get(\"custom_trade_in_serial_no\"),  # Get custom serial number value\r\n            \"expense_account\": trade_in_control_account,\r\n        })\r\n\r\n# Create a single stock entry if there are items to add\r\nif items_list:\r\n    stock_entry = frappe.get_doc({\r\n        \"doctype\": \"Stock Entry\",\r\n        \"stock_entry_type\": \"Material Receipt\",\r\n        \"to_warehouse\": \"Stores - TC\",\r\n        \"items\": items_list,  # Use the populated list here\r\n        \"custom_sales_invoice\": doc.name,  # Set the parent field here\r\n    })\r\n\r\n    stock_entry.insert()\r\n    stock_entry.submit()\r\n\r\n    # Stock Entry\r\n    frappe.msgprint(f\"Stock Entry {stock_entry.name} created successfully!\")\r\nelse:\r\n    frappe.msgprint(\"No valid items found for stock entry.\")\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "event_frequency": "All",
  "modified": "2024-12-09 20:54:42.502944",
  "module": "Trade In",
  "name": "Trade In Serial No and Batch Validation",
  "reference_doctype": "Sales Invoice",
  "script": "# Initialize a list to collect error messages\r\nerror_messages = []\r\n\r\n# Iterate through the rows of the child table\r\nfor row in doc.items:\r\n    # Check if item_code is \"Trade In\"\r\n    if row.item_code == \"Trade In\" and row.custom_trade_in_item:\r\n        # Validate batch number if the item requires it\r\n        has_batch_no = frappe.db.get_value(\"Item\", row.custom_trade_in_item, \"has_batch_no\")\r\n        if has_batch_no and not row.custom_trade_in_batch_no:\r\n            error_messages.append(f\"Batch No. is mandatory for Item {row.custom_trade_in_item} in row {row.idx}.\")\r\n        \r\n        # Validate serial numbers if the item requires them\r\n        has_serial_no = frappe.db.get_value(\"Item\", row.custom_trade_in_item, \"has_serial_no\")\r\n        if has_serial_no:\r\n            if not row.custom_trade_in_serial_no:\r\n                error_messages.append(f\"Serial Numbers are mandatory for Item {row.custom_trade_in_item} in row {row.idx}.\")\r\n            else:\r\n                # Split serial numbers by newline and validate the count\r\n                serial_numbers = row.custom_trade_in_serial_no.split(\"\\n\")\r\n                if len(serial_numbers) != row.custom_trade_in_qty:\r\n                    error_messages.append(\r\n                        f\"Serial Numbers count ({len(serial_numbers)}) does not match \"\r\n                        f\"the Trade-In Quantity ({row.custom_trade_in_qty}) for Item {row.custom_trade_in_item} in row {row.idx}.\"\r\n                    )\r\n\r\n# If there are any errors, raise them all at once\r\nif error_messages:\r\n    frappe.throw(\r\n        title=\"Validation Errors\",\r\n        msg=\"<br>\".join(error_messages),\r\n    )\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "event_frequency": "All",
  "modified": "2024-12-09 20:55:59.056350",
  "module": "Trade In",
  "name": "Trade In Sales Percentage Validation",
  "reference_doctype": "Sales Invoice",
  "script": "# Calculate the total trade-in value from the child table where item_code = \"Trade In\"\r\ntotal_trade_in_value = sum(\r\n    row.custom_total_trade_in_value for row in doc.items if row.item_code == \"Trade In\"\r\n)\r\n\r\n# Calculate the total for items in the child table where item_code != \"Trade In\" using the \"amount\" field\r\nnon_trade_in_total = sum(\r\n    row.amount for row in doc.items if row.item_code != \"Trade In\"\r\n)\r\n\r\n# Fetch allowed percentage from the Company doctype\r\ntrade_in_percentage = frappe.db.get_value(\"Company\", doc.company, \"custom_trade_in_sales_percentage\") or 0\r\n\r\n# Calculate the allowed trade-in value based on the percentage of non-trade-in total\r\nallowed_trade_in_value = (trade_in_percentage / 100) * non_trade_in_total\r\n\r\n# Validate total trade-in value\r\nif total_trade_in_value > allowed_trade_in_value:\r\n    # Throw error if child table total exceeds the allowed limit\r\n    frappe.throw(\r\n        title=\"Trade-In Value Validation Error\",\r\n        msg=(\r\n            f\"Total Trade-In Value ({frappe.format_value(total_trade_in_value)}) exceeds the allowed limit. \"\r\n            f\"The allowed limit is {trade_in_percentage}% of the total value of non-Trade-In items in the Sales Invoice. \"\r\n            f\"Maximum allowed Trade-In Value: {frappe.format_value(allowed_trade_in_value)}.\"\r\n        )\r\n    )\r\n",
  "script_type": "DocType Event"
 }
]